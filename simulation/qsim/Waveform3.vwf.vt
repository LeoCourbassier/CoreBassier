// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/14/2018 14:33:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg key0;
reg key1;
reg key2;
reg key3;
reg sw0;
reg sw1;
reg sw2;
reg sw3;
reg sw4;
reg sw5;
reg sw6;
reg sw7;
reg sw8;
reg sw9;
reg sw10;
reg sw11;
reg sw12;
reg sw13;
reg sw14;
reg sw15;
reg sw16;
reg sw17;
// wires                                               
wire [9:0] _programCounter;
wire aluBranchSignal;
wire [5:0] aluCode;
wire aluError;
wire [31:0] aluOut;
wire aluSource;
wire [31:0] aluSource1;
wire [31:0] aluSource2;
wire branch;
wire branchSignal;
wire [31:0] dataA;
wire [31:0] dataB;
wire [31:0] dataToWrite;
wire error;
wire halt;
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [6:0] hex4;
wire [6:0] hex5;
wire [6:0] hex6;
wire [6:0] hex7;
wire [31:0] instructionOut;
wire [31:0] intermediate;
wire [31:0] memoryOut;
wire memoryRead;
wire memoryToRegister;
wire memoryWrite;
wire overflow;
wire targetRegister;
wire writeRegister;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	._programCounter(_programCounter),
	.aluBranchSignal(aluBranchSignal),
	.aluCode(aluCode),
	.aluError(aluError),
	.aluOut(aluOut),
	.aluSource(aluSource),
	.aluSource1(aluSource1),
	.aluSource2(aluSource2),
	.branch(branch),
	.branchSignal(branchSignal),
	.clock(clock),
	.dataA(dataA),
	.dataB(dataB),
	.dataToWrite(dataToWrite),
	.error(error),
	.halt(halt),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.hex4(hex4),
	.hex5(hex5),
	.hex6(hex6),
	.hex7(hex7),
	.instructionOut(instructionOut),
	.intermediate(intermediate),
	.key0(key0),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.memoryOut(memoryOut),
	.memoryRead(memoryRead),
	.memoryToRegister(memoryToRegister),
	.memoryWrite(memoryWrite),
	.overflow(overflow),
	.sw0(sw0),
	.sw1(sw1),
	.sw2(sw2),
	.sw3(sw3),
	.sw4(sw4),
	.sw5(sw5),
	.sw6(sw6),
	.sw7(sw7),
	.sw8(sw8),
	.sw9(sw9),
	.sw10(sw10),
	.sw11(sw11),
	.sw12(sw12),
	.sw13(sw13),
	.sw14(sw14),
	.sw15(sw15),
	.sw16(sw16),
	.sw17(sw17),
	.targetRegister(targetRegister),
	.writeRegister(writeRegister)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #25000 1'b1;
	#25000;
end 
endmodule

